{"version":3,"sources":["navbar/navbar.js","article/article.js","services/navigation-handler.js","App.js","serviceWorker.js","index.js","navbar/navbar.module.css","article/article.module.css"],"names":["Navbar","props","handleClick","e","stopPropagation","onClick","target","innerHTML","className","classes","navbar","map","i","key","href","Article","name","story","article","src","alt","parse","marked","loadArticle","fetch","toLocaleLowerCase","replace","fn","then","md","text","setArticle","a","this","setState","App","componentDidMount","render","state","bind","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"sSAGaA,EAAS,SAACC,GACnB,IAUMC,EAAc,SAAUC,GAC1BA,EAAEC,kBACFH,EAAMI,QAAQF,EAAEG,OAAOC,YAE3B,OACI,wBAAIC,UAAWC,IAAQC,QAfb,CACV,WACA,WACA,eACA,oBACA,WACA,mBACA,WACA,YAQWC,KAAI,SAACR,EAAGS,GAAJ,OACP,wBAAIC,IAAKD,GACL,uBAAGE,KAAK,IAAIT,QAASH,GAChBC,S,kDClBZY,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OACnB,yBAAKT,UAAWC,IAAQS,SACpB,4BAAKF,GACL,6BACI,yBAAKG,IAAI,mBAAmBC,IAAI,KAChC,8BAAOC,IAAMC,IAAOL,GAAS,S,wBCRnCM,EAAc,SAACP,GAAD,OAAUQ,MAFnB,SAACR,GAAD,gBAAaA,EAAKS,oBAAoBC,QAAQ,KAAM,KAApD,OAEyBC,CAAGX,IAAOY,MAAK,SAACC,GAAD,OAAQA,EAAGC,WAEjDC,EAAU,uCAAG,WAAgBf,GAAhB,eAAAgB,EAAA,sEACJT,EAAYP,GADR,OAClBC,EADkB,OAEtBgB,KAAKC,SAAS,CAAEjB,MAAOA,EAAOD,KAAMA,IAFd,gDAAH,sDCEFmB,E,kDACjB,WAAYlC,GAAQ,IAAD,8BACf,cAAMA,IAIVmC,kBAAoB,kBAAM,EAAKL,WAAW,aALvB,EAOnBM,OAAS,kBACL,yBAAK7B,UAAU,OACX,+CACA,kBAAC,EAAD,CAAQH,QAAS,EAAK0B,aACtB,kBAAC,EAAY,EAAKO,SATtB,EAAKP,WAAaA,EAAWQ,KAAX,gBAFH,E,UADUC,aCMbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAST,OACL,kBAAC,IAAMU,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BC,EAAOC,QAAU,CAAC,OAAS,yB,kBCA3BD,EAAOC,QAAU,CAAC,QAAU,4B","file":"static/js/main.e8564746.chunk.js","sourcesContent":["import React from \"react\";\nimport classes from \"./navbar.module.css\";\n\nexport const Navbar = (props) => {\n    const links = [\n        \"About me\",\n        \"Research\",\n        \"Publications\",\n        \"Conferences-Talks\",\n        \"Teaching\",\n        \"Editorial Boards\",\n        \"Outreach\",\n        \"Contacts\",\n    ];\n    const handleClick = function (e) {\n        e.stopPropagation();\n        props.onClick(e.target.innerHTML);\n    };\n    return (\n        <ul className={classes.navbar}>\n            {links.map((e, i) => (\n                <li key={i}>\n                    <a href=\"#\" onClick={handleClick}>\n                        {e}\n                    </a>\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import React from \"react\";\nimport classes from \"./article.module.css\";\nimport marked from \"marked\";\nimport parse from \"html-react-parser\";\n\nexport const Article = ({ name, story }) => (\n    <div className={classes.article}>\n        <h2>{name}</h2>\n        <div>\n            <img src=\"./images/fra.jpg\" alt=\"\" />\n            <span>{parse(marked(story || \"\"))}</span>\n        </div>\n    </div>\n);\n","const fn = (name) => `${name.toLocaleLowerCase().replace(/ /g, \"-\")}.md`;\n\nconst loadArticle = (name) => fetch(fn(name)).then((md) => md.text());\n\nexport const setArticle = async function (name) {\n    let story = await loadArticle(name);\n    this.setState({ story: story, name: name });\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Navbar } from \"./navbar/navbar\";\nimport { Article } from \"./article/article\";\nimport { setArticle } from \"./services/navigation-handler\";\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n        this.setArticle = setArticle.bind(this);\n    }\n\n    componentDidMount = () => this.setArticle(\"About me\");\n\n    render = () => (\n        <div className=\"App\">\n            <h1>Francesca Ervas</h1>\n            <Navbar onClick={this.setArticle}></Navbar>\n            <Article {...this.state}></Article>\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"navbar_navbar__1ufxU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"article\":\"article_article__1mwSa\"};"],"sourceRoot":""}